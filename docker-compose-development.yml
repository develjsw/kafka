services:
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-network
    volumes:
      # Docker Compose 실행 전 host 서버에 zookeeper-data 생성 필요
      # [방법-1] Docker가 관리하는 이름인 'zookeeper-data:/bitnami' 지정된 볼륨을 사용하므로 권한 에러 발생하지 않음
      # - zookeeper-data:/bitnami
      # [방법-2] 내가 생성하고 싶은 폴더를 host에 생성 후 - 폴더 소유자 권한을 컨테이너 내부 사용자와 동일하게 변경 (bitnami 사용자의 UID가 1001이므로 1001로 변경)
      - /data/logs/zookeeper:/bitnami

  kafka-1:
    image: bitnami/kafka:latest
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092 # 내부 리스너용 포트
      - 9095:9095 # 외부 리스너용 포트
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://52.78.56.128:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
    networks:
      - kafka-network
    volumes:
      # Docker Compose 실행 전 host 서버에 kafka-1-data:/bitnami 생성 필요
      # [방법-1] Docker가 관리하는 이름인 'kafka-1-data:/bitnami' 지정된 볼륨을 사용하므로 권한 에러 발생하지 않음
      # - kafka-1-data:/bitnami
      # [방법-2] 내가 생성하고 싶은 폴더를 host에 생성 후 - 폴더 소유자 권한을 컨테이너 내부 사용자와 동일하게 변경 (bitnami 사용자의 UID가 1001이므로 1001로 변경)
      - /data/logs/kafka-1:/bitnami

  kafka-2:
    image: bitnami/kafka:latest
    container_name: kafka-2
    depends_on:
      - zookeeper
    ports:
      - 9093:9093
      - 9096:9096
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9093,EXTERNAL://52.78.56.128:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
    networks:
      - kafka-network
    volumes:
      # Docker Compose 실행 전 host 서버에 kafka-2-data:/bitnami 생성 필요
      # [방법-1] Docker가 관리하는 이름인 'kafka-2-data:/bitnami' 지정된 볼륨을 사용하므로 권한 에러 발생하지 않음
      # - kafka-2-data:/bitnami
      # [방법-2] 내가 생성하고 싶은 폴더를 host에 생성 후 - 폴더 소유자 권한을 컨테이너 내부 사용자와 동일하게 변경 (bitnami 사용자의 UID가 1001이므로 1001로 변경)
      - /data/logs/kafka-2:/bitnami

  kafka-3:
    image: bitnami/kafka:latest
    container_name: kafka-3
    depends_on:
      - zookeeper
    ports:
      - 9094:9094
      - 9097:9097
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9094,EXTERNAL://:9097
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9094,EXTERNAL://52.78.56.128:9097
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_BROKER_ID=3
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
    networks:
      - kafka-network
    volumes:
      # Docker Compose 실행 전 host 서버에 kafka-3-data:/bitnami 생성 필요
      # [방법-1] Docker가 관리하는 이름인 'kafka-3-data:/bitnami' 지정된 볼륨을 사용하므로 권한 에러 발생하지 않음
      # - kafka-3-data:/bitnami
      # [방법-2] 내가 생성하고 싶은 폴더를 host에 생성 후 - 폴더 소유자 권한을 컨테이너 내부 사용자와 동일하게 변경 (bitnami 사용자의 UID가 1001이므로 1001로 변경)
      - /data/logs/kafka-3:/bitnami

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - 9090:8080
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=peters_kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9093,kafka-3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CLUSTERS_0_JMX_ENABLED=true
    networks:
      - kafka-network

  producer:
    image: producer:latest
    build:
      context: .
      dockerfile: dockerfile/Dockerfile-development
    ports:
      - 7777:7777
    environment:
      - PORT=7777
      - NODE_ENV=development
    restart: always
    networks:
      - kafka-network

networks:
  kafka-network:

# 방법-2 사용시에는 사용하지 않음
#volumes:
  #zookeeper-data:
  #kafka-1-data:
  #kafka-2-data:
  #kafka-3-data: